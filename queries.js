const Pool = require('pg').Pool
const pool = new Pool({
  user: 'me',
  host: 'localhost',
  database: 'api',
  password: 'password',
  port: 5432,
})


const getGroups = (request, response) => {
  pool.query('SELECT * FROM group ORDER BY group_id ASC', (error, results) => {
    if (error) {
      throw error
    }
    response.status(200).json(results.rows)
  })
}

const getGroupById = (request, response) => {
  const id = parseInt(request.params.id)

  pool.query('SELECT * FROM project WHERE project_id = $1', [id], (error, results) => {
    if (error) {
      throw error
    }
    response.status(200).json(results.rows)
  })
}

const createGroup = (request, response) => { //project_id is autogenerated
  const { student_id1, student_id2, student_id3, first_name1, first_name2, first_name3, 
    last_name1, last_name2, last_name3, email1, email2, email3, 
  choice1,choice2,choice3} = request.body

  for(var i =0;i<3;i++){

      pool.query('INSERT INTO student (student_id'+i+1+', first_name'+i+1+', last_name'+i+1+', email'+i+1+
      ') VALUES ($1, $2, $3, $4)', 
      [request.body[i], request.body[i+3], request.body[i+6],request.body[i+9]], (error, results) => {
        if (error) {
          throw error
        }  
        response.status(201).send(`Student added with ID: ${result.insertId}`)
      })

  }

  var groupId = pool.query('INSERT INTO group (student_id) VALUES (SELECT student_id from student WHERE student_id =$1) RETURNING group_id',
  [student_id1], (error, results) => {
    if (error) {
      throw error
    }
    response.status(201).send(`Group added with ID: ${result.insertId}`)
  }

  )

  pool.query('INSERT INTO group (student_id) WHERE EXISTS(select 1 from group where group_id ='+groupId+' ) VALUES (SELECT student_id from student WHERE student_id =$1)',
  [student_id2], (error, results) => {
    if (error) {
      throw error
    }
    response.status(201).send(`Group added with ID: ${result.insertId}`)
  }
  )

  pool.query('INSERT INTO group (student_id) WHERE EXISTS(select 1 from group where group_id ='+groupId+' ) VALUES (SELECT student_id from student WHERE student_id =$1)',
  [student_id3], (error, results) => {
    if (error) {
      throw error
    }
    response.status(201).send(`Group added with ID: ${result.insertId}`)
  }
  )

  pool.query('INSERT INTO group_preference (group_id, choice1, choice2, choice3) VALUES (SELECT group_id from group WHERE group_id =$1),$2,$3,$4',
  [groupId, choice1, choice2, choice3], (error, results) => {
    if (error) {
      throw error
    }
    response.status(201).send(`Group_preference added with ID: ${result.insertId}`)
  }
  )



}



const getProjects = (request, response) => {
  pool.query('SELECT * FROM project ORDER BY project_id ASC', (error, results) => {
    if (error) {
      throw error
    }
    response.status(200).json(results.rows)
  })
}

const getProjectById = (request, response) => {
  const id = parseInt(request.params.id)

  pool.query('SELECT * FROM project WHERE project_id = $1', [id], (error, results) => {
    if (error) {
      throw error
    }
    response.status(200).json(results.rows)
  })
}

const createProject = (request, response) => { //project_id is autogenerated
  const { title, description, category,requirement } = request.body

  pool.query('INSERT INTO project (title, description, category, requirement) VALUES ($1, $2, $3, $4)', 
  [title, description, category,requirement], (error, results) => {
    if (error) {
      throw error
    }
    response.status(201).send(`Project added with ID: ${result.insertId}`)
  })
}

const getAdmins = (request, response) => {
    pool.query('SELECT * FROM admin ORDER BY admin_id ASC', (error, results) => {
      if (error) {
        throw error
      }
      response.status(200).json(results.rows)
    })
  }
  
  const getAdminById = (request, response) => {
    const id = parseInt(request.params.id)
  
    pool.query('SELECT * FROM admin WHERE admin_id = $1', [id], (error, results) => {
      if (error) {
        throw error
      }
      response.status(200).json(results.rows)
    })
  }
  
  const createAdmin = (request, response) => {
    const { admin_id, password, first_name, last_name } = request.body
  
    pool.query('INSERT INTO admin (admin_id, password, first_name, last_name) VALUES ($1, $2, $3, $4)', 
    [admin_id, password, first_name, last_name], (error, results) => {
      if (error) {
        throw error
      }
      response.status(201).send(`User added with ID: ${result.insertId}`)
    })
  }

  
  const deleteAdmin = (request, response) => {
    const id = parseInt(request.params.id)
  
    pool.query('DELETE FROM admin WHERE id = $1', [id], (error, results) => {
      if (error) {
        throw error
      }
      response.status(200).send(`User deleted with ID: ${id}`)
    })
  }

  module.exports = {
    getAdmins,
    getAdminById,
    createAdmin,
    //updateUser,
    deleteAdmin,

    getProjects,
    getProjectById,
    createProject,
  }

  const db = require('./queries')